// <auto-generated />
using System;
using JawelryStore.Persistance.EntityFrameworks;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace JawelryStore.Persistance.Migrations
{
    [DbContext(typeof(JewelryStoreContext))]
    partial class JewelryStoreContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("JewelryStore.Domain.Entities.Jewelry.CartItems", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("id"));

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("CreatedDateTime");

                    b.Property<int?>("CreatedId")
                        .HasColumnType("int")
                        .HasColumnName("Created_Id");

                    b.Property<int>("PorductId")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("UpdatedDateTime");

                    b.Property<int?>("UpdatedId")
                        .HasColumnType("int")
                        .HasColumnName("Updeted_Id");

                    b.HasKey("id");

                    b.HasIndex("PorductId");

                    b.ToTable("CartItemss");
                });

            modelBuilder.Entity("JewelryStore.Domain.Entities.Jewelry.Category", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("id"));

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("CreatedDateTime");

                    b.Property<int?>("CreatedId")
                        .HasColumnType("int")
                        .HasColumnName("Created_Id");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("UpdatedDateTime");

                    b.Property<int?>("UpdatedId")
                        .HasColumnType("int")
                        .HasColumnName("Updeted_Id");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("id");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            id = 1,
                            Value = "Men"
                        },
                        new
                        {
                            id = 2,
                            Value = "Women"
                        },
                        new
                        {
                            id = 3,
                            Value = "Kids"
                        },
                        new
                        {
                            id = 4,
                            Value = "Beauty"
                        },
                        new
                        {
                            id = 5,
                            Value = "Jewelry"
                        },
                        new
                        {
                            id = 6,
                            Value = "Designers"
                        });
                });

            modelBuilder.Entity("JewelryStore.Domain.Entities.Jewelry.Designers", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("id"));

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("CreatedDateTime");

                    b.Property<int?>("CreatedId")
                        .HasColumnType("int")
                        .HasColumnName("Created_Id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("UpdatedDateTime");

                    b.Property<int?>("UpdatedId")
                        .HasColumnType("int")
                        .HasColumnName("Updeted_Id");

                    b.HasKey("id");

                    b.ToTable("Designerss");
                });

            modelBuilder.Entity("JewelryStore.Domain.Entities.Jewelry.Images", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("id"));

                    b.Property<string>("ContentType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Content_Type");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("CreatedDateTime");

                    b.Property<int?>("CreatedId")
                        .HasColumnType("int")
                        .HasColumnName("Created_Id");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("UpdatedDateTime");

                    b.Property<int?>("UpdatedId")
                        .HasColumnType("int")
                        .HasColumnName("Updeted_Id");

                    b.Property<int>("Url")
                        .HasColumnType("int");

                    b.HasKey("id");

                    b.HasIndex("ProductId");

                    b.ToTable("Imagess");
                });

            modelBuilder.Entity("JewelryStore.Domain.Entities.Jewelry.Product", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("id"));

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<string>("Color")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("CreatedDateTime");

                    b.Property<int?>("CreatedId")
                        .HasColumnType("int")
                        .HasColumnName("Created_Id");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("DesignersId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal");

                    b.Property<int>("ProductDetailid")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("UpdatedDateTime");

                    b.Property<int?>("UpdatedId")
                        .HasColumnType("int")
                        .HasColumnName("Updeted_Id");

                    b.HasKey("id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("DesignersId");

                    b.ToTable("Products");
                });

            modelBuilder.Entity("JewelryStore.Domain.Entities.Jewelry.ProductDetail", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("id"));

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("CreatedDateTime");

                    b.Property<int?>("CreatedId")
                        .HasColumnType("int")
                        .HasColumnName("Created_Id");

                    b.Property<string>("Material")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Model")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<int>("Size")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("UpdatedDateTime");

                    b.Property<int?>("UpdatedId")
                        .HasColumnType("int")
                        .HasColumnName("Updeted_Id");

                    b.HasKey("id");

                    b.HasIndex("ProductId")
                        .IsUnique();

                    b.ToTable("ProductDetails");
                });

            modelBuilder.Entity("JewelryStore.Domain.Entities.Jewelry.Review", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("id"));

                    b.Property<string>("Comment")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("CreatedDateTime");

                    b.Property<int?>("CreatedId")
                        .HasColumnType("int")
                        .HasColumnName("Created_Id");

                    b.Property<int>("Point")
                        .HasColumnType("integer");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("UpdatedDateTime");

                    b.Property<int?>("UpdatedId")
                        .HasColumnType("int")
                        .HasColumnName("Updeted_Id");

                    b.Property<int>("UsersId")
                        .HasColumnType("int");

                    b.HasKey("id");

                    b.HasIndex("UsersId");

                    b.ToTable("Reviews");
                });

            modelBuilder.Entity("JewelryStore.Domain.Entities.Jewelry.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserRole")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Roles");
                });

            modelBuilder.Entity("JewelryStore.Domain.Entities.Jewelry.SubCategory", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("id"));

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("CreatedDateTime");

                    b.Property<int?>("CreatedId")
                        .HasColumnType("int")
                        .HasColumnName("Created_Id");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("UpdatedDateTime");

                    b.Property<int?>("UpdatedId")
                        .HasColumnType("int")
                        .HasColumnName("Updeted_Id");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("id");

                    b.HasIndex("CategoryId");

                    b.ToTable("SubCategories");
                });

            modelBuilder.Entity("JewelryStore.Domain.Entities.Jewelry.UserDetail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("DateOfBirth")
                        .HasColumnType("DateTime")
                        .HasColumnName("Date_Of_Birth");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("First_Name");

                    b.Property<int?>("ImagesId")
                        .HasColumnType("int");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("Last_Name");

                    b.Property<int>("UsersId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ImagesId");

                    b.HasIndex("UsersId")
                        .IsUnique();

                    b.ToTable("UserDetails");
                });

            modelBuilder.Entity("JewelryStore.Domain.Entities.Jewelry.Users", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PasswordSalt")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.ToTable("Userss");
                });

            modelBuilder.Entity("JewelryStore.Domain.Entities.Jewelry.UsersRole", b =>
                {
                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.Property<int>("UsersId")
                        .HasColumnType("int");

                    b.HasKey("RoleId", "UsersId");

                    b.HasIndex("UsersId");

                    b.ToTable("UsersRoles");
                });

            modelBuilder.Entity("JewelryStore.Domain.Entities.Jewelry.CartItems", b =>
                {
                    b.HasOne("JewelryStore.Domain.Entities.Jewelry.Product", "Product")
                        .WithMany("CartItems")
                        .HasForeignKey("PorductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");
                });

            modelBuilder.Entity("JewelryStore.Domain.Entities.Jewelry.Images", b =>
                {
                    b.HasOne("JewelryStore.Domain.Entities.Jewelry.Product", "Product")
                        .WithMany("Images")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");
                });

            modelBuilder.Entity("JewelryStore.Domain.Entities.Jewelry.Product", b =>
                {
                    b.HasOne("JewelryStore.Domain.Entities.Jewelry.Category", "Category")
                        .WithMany("Products")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("JewelryStore.Domain.Entities.Jewelry.Designers", "Designers")
                        .WithMany("Products")
                        .HasForeignKey("DesignersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("Designers");
                });

            modelBuilder.Entity("JewelryStore.Domain.Entities.Jewelry.ProductDetail", b =>
                {
                    b.HasOne("JewelryStore.Domain.Entities.Jewelry.Product", "Product")
                        .WithOne("ProductDetail")
                        .HasForeignKey("JewelryStore.Domain.Entities.Jewelry.ProductDetail", "ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");
                });

            modelBuilder.Entity("JewelryStore.Domain.Entities.Jewelry.Review", b =>
                {
                    b.HasOne("JewelryStore.Domain.Entities.Jewelry.Users", "Users")
                        .WithMany("Reviews")
                        .HasForeignKey("UsersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Users");
                });

            modelBuilder.Entity("JewelryStore.Domain.Entities.Jewelry.SubCategory", b =>
                {
                    b.HasOne("JewelryStore.Domain.Entities.Jewelry.Category", "Category")
                        .WithMany("SubCategories")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");
                });

            modelBuilder.Entity("JewelryStore.Domain.Entities.Jewelry.UserDetail", b =>
                {
                    b.HasOne("JewelryStore.Domain.Entities.Jewelry.Images", "Images")
                        .WithMany("UserDetails")
                        .HasForeignKey("ImagesId");

                    b.HasOne("JewelryStore.Domain.Entities.Jewelry.Users", "Users")
                        .WithOne("UserDetail")
                        .HasForeignKey("JewelryStore.Domain.Entities.Jewelry.UserDetail", "UsersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Images");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("JewelryStore.Domain.Entities.Jewelry.UsersRole", b =>
                {
                    b.HasOne("JewelryStore.Domain.Entities.Jewelry.Role", "Role")
                        .WithMany("UsersRoles")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("JewelryStore.Domain.Entities.Jewelry.Users", "Users")
                        .WithMany("UsersRoles")
                        .HasForeignKey("UsersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("JewelryStore.Domain.Entities.Jewelry.Category", b =>
                {
                    b.Navigation("Products");

                    b.Navigation("SubCategories");
                });

            modelBuilder.Entity("JewelryStore.Domain.Entities.Jewelry.Designers", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("JewelryStore.Domain.Entities.Jewelry.Images", b =>
                {
                    b.Navigation("UserDetails");
                });

            modelBuilder.Entity("JewelryStore.Domain.Entities.Jewelry.Product", b =>
                {
                    b.Navigation("CartItems");

                    b.Navigation("Images");

                    b.Navigation("ProductDetail")
                        .IsRequired();
                });

            modelBuilder.Entity("JewelryStore.Domain.Entities.Jewelry.Role", b =>
                {
                    b.Navigation("UsersRoles");
                });

            modelBuilder.Entity("JewelryStore.Domain.Entities.Jewelry.Users", b =>
                {
                    b.Navigation("Reviews");

                    b.Navigation("UserDetail")
                        .IsRequired();

                    b.Navigation("UsersRoles");
                });
#pragma warning restore 612, 618
        }
    }
}
